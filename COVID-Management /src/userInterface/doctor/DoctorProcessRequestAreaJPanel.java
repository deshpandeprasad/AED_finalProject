
package userInterface.doctor;


import business.EcoSystem;
import business.common.GetOrganizations;
import business.common.SendEmailAndTextMessage;
import business.networkpkg.Network;
import business.organizationpkg.*;
import business.userAccountpkg.UserAccount;
import business.workQueuepkg.*;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

//this is the DoctorProcessRequestAreaJPanel
public class DoctorProcessRequestAreaJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private DoctorWorkRequest request;
 
    private  EcoSystem ecoSystem;
    private EmergencyOrganization emergencyOrg;
    private AmbulanceOrganization ambOrg;
    private UserAccount userAccount;
  
    public DoctorProcessRequestAreaJPanel(JPanel userProcessContainer, DoctorWorkRequest request, EcoSystem ecoSystem, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.request = request;
        this.ecoSystem = ecoSystem;
        this.userAccount = userAccount;
        resultCmb.removeAllItems();
        resultCmb.addItem(DoctorWorkRequest.REQUEST_APPROVED);
        resultCmb.addItem(DoctorWorkRequest.REQUEST_REJECT);
        
        populateNetworkComboBox();
        populateEdocComboBox();
        populateDriverComboBox();
    }
    
    
    private void populateNetworkComboBox(){
        
        assignNetworkCmb.removeAllItems();
         if(ecoSystem.getNetworkList().isEmpty())
        {
        JOptionPane.showMessageDialog(null, "Networks does not exist! Please create networks.");  
         return;        
        }
        assignNetworkCmb.addItem("Please assign a Network");
        
           
        for(Network network : ecoSystem.getNetworkList())
        {
             assignNetworkCmb.addItem(network);
        }

        }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backJButton = new javax.swing.JButton();
        submitJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        resultCmb = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        commentsJTextField = new javax.swing.JTextField();
        assignNetworkCmb = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        assignEdoctxt = new javax.swing.JLabel();
        assignEdocCmb = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        assignDriverCmb = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 610, -1, -1));

        submitJButton.setText("Submit ");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });
        add(submitJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 440, -1, -1));

        jLabel1.setText("Request Result");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 90, -1, -1));

        jLabel7.setFont(new java.awt.Font("Malayalam MN", 3, 24)); // NOI18N
        jLabel7.setText("Process Work Request:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 0, 300, -1));

        resultCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(resultCmb, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 90, 342, -1));

        jLabel2.setText("Add comments: ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 160, -1, -1));
        add(commentsJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 150, 342, -1));

        assignNetworkCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        assignNetworkCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignNetworkCmbActionPerformed(evt);
            }
        });
        add(assignNetworkCmb, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 210, 342, -1));

        jLabel3.setText("Assign Location");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 220, 154, -1));

        assignEdoctxt.setText("Assign Doctor");
        add(assignEdoctxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 260, 120, 60));

        assignEdocCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        assignEdocCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignEdocCmbActionPerformed(evt);
            }
        });
        add(assignEdocCmb, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 270, 342, -1));

        jLabel4.setText("Assign Ambulance Driver");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 340, -1, -1));

        assignDriverCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        assignDriverCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignDriverCmbActionPerformed(evt);
            }
        });
        add(assignDriverCmb, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 330, 330, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/finalopaquebg.png"))); // NOI18N
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 980));
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        DoctorWorkAreaJPanel doctorWorkAreaJPanel = (DoctorWorkAreaJPanel) component;
        doctorWorkAreaJPanel.populateWorkRequestTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        if(resultCmb.getSelectedIndex()<0 || commentsJTextField.getText().trim().isEmpty() ||
                assignNetworkCmb.getSelectedIndex()<1)
        {
        JOptionPane.showMessageDialog(null, "Please enter data in all fields", "warning", JOptionPane.WARNING_MESSAGE);
        return;
        }
        Network net = (Network)assignNetworkCmb.getSelectedItem();
      
        
        request.setStatus(DoctorWorkRequest.REQUEST_COMPLETED);
        System.out.print("Request status");
        System.out.println(request.getStatus());
        request.setResolveDate(new Date());
        request.setTestResult((String)resultCmb.getSelectedItem());
        request.setComments(commentsJTextField.getText());
        request.getSender().setNetwork(net);
        System.out.print("Request approved or no");
        System.out.println(request.getTestResult());
        if(request.getTestResult().equals(DoctorWorkRequest.REQUEST_APPROVED))
        {
            request.getSender().setEnabled(true);
            System.out.println(request.getSender().getUserName());

        }
         
       
       UserAccount edocAccount = (UserAccount) assignEdocCmb.getSelectedItem();
               System.out.print(edocAccount.getUserName());
               
       
        String driverName = (String)assignDriverCmb.getSelectedItem();
        
        UserAccount driverAcc = null;
         for(UserAccount userAcc : ambOrg.getUserAccountDirectory().getUserAccountList())
        {
               if(userAcc.getUserName().equals(driverName))
               {
                   
                   driverAcc = userAcc;
                   
               }
        }
         
               
                if(request.getTestResult().equals(DoctorWorkRequest.REQUEST_APPROVED))
                {
               
                SendDataToEdocWorkRequest sendDataToEdocWorkRequest = new SendDataToEdocWorkRequest();
                NeedTransportWorkRequest needTransportWorkRequest = new NeedTransportWorkRequest();
                needTransportWorkRequest.setMessage("Need Transport");
                needTransportWorkRequest.setStatus("Sent");
                needTransportWorkRequest.setRequestDate(new Date());
                sendDataToEdocWorkRequest.setMessage("Sending patient");
               sendDataToEdocWorkRequest.setSender(request.getSender());
               needTransportWorkRequest.setSender(request.getSender());
               sendDataToEdocWorkRequest.setStatus("Sent");
             
                sendDataToEdocWorkRequest.setRequestDate(new Date());
                sendDataToEdocWorkRequest.setReceiver(edocAccount);
              
                edocAccount.getWorkQueue().getWorkRequestList().add(sendDataToEdocWorkRequest);
                request.getSender().getWorkQueue().getWorkRequestList().add(sendDataToEdocWorkRequest);
                request.getSender().getWorkQueue().getWorkRequestList().add(needTransportWorkRequest);
                
                driverAcc.getWorkQueue().getWorkRequestList().add(needTransportWorkRequest);
                
                
                //email sent after the request from doctor is accepted
                request.getSender().setEnabled(true);
           
                String emailId = request.getSender().getPerson().getEmailId();
                String userName = request.getSender().getUserName();
                String password = request.getSender().getPassword();
                
                StringBuilder emailMsgTxt = new StringBuilder();
                emailMsgTxt.append("Your account is enabled. Please find username and password");
                emailMsgTxt.append(System.lineSeparator());
                emailMsgTxt.append("Username is: ".concat(userName));
                emailMsgTxt.append(System.lineSeparator());
                emailMsgTxt.append("Password is: ".concat(password));
                emailMsgTxt.append(System.lineSeparator());
                emailMsgTxt.append(System.lineSeparator());
                emailMsgTxt.append("Thank You");
                emailMsgTxt.append("TEAM 21 COVID MANAGEMENT");
                
                SendEmailAndTextMessage.sendEmail(emailMsgTxt.toString(),emailId);
                
                JOptionPane.showMessageDialog(null, "Data and Email also sent with user login details", "success", JOptionPane.PLAIN_MESSAGE);
                }
                
                else 
                {
                    
                    JOptionPane.showMessageDialog(null, "Not sent to emrgency ward, email not sent", "success", JOptionPane.PLAIN_MESSAGE);
                    
                }
           
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void assignNetworkCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignNetworkCmbActionPerformed
        
    }//GEN-LAST:event_assignNetworkCmbActionPerformed

    private void assignEdocCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignEdocCmbActionPerformed
        // TODO add your handling code here:
       
        
        
        
        
    }//GEN-LAST:event_assignEdocCmbActionPerformed

    private void assignDriverCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignDriverCmbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_assignDriverCmbActionPerformed
    
    
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> assignDriverCmb;
    private javax.swing.JComboBox assignEdocCmb;
    private javax.swing.JLabel assignEdoctxt;
    private javax.swing.JComboBox assignNetworkCmb;
    private javax.swing.JButton backJButton;
    private javax.swing.JTextField commentsJTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox resultCmb;
    private javax.swing.JButton submitJButton;
    // End of variables declaration//GEN-END:variables

    private void populateEdocComboBox() 
    {
        
        try
       {
        assignEdocCmb.removeAllItems();
        emergencyOrg =  GetOrganizations.getEmergencyOrganization(ecoSystem, userAccount);
       
        
      

       if(emergencyOrg!=null)
       {
        if(emergencyOrg.getUserAccountDirectory().getUserAccountList().isEmpty())
        {
        JOptionPane.showMessageDialog(null, "No emergency doctors exists in our records as of now!","warning", JOptionPane.WARNING_MESSAGE);
         return;    
        }
         assignEdocCmb.removeAllItems();
        for(UserAccount userAccount : emergencyOrg.getUserAccountDirectory().getUserAccountList())
        {
       assignEdocCmb.addItem(userAccount);
        }   
       }
       }
       catch(NullPointerException exc)
       {
       JOptionPane.showMessageDialog(null, "No Emergency Organization exists in our records as of now!","warning", JOptionPane.WARNING_MESSAGE);
               
       }
        
        
        
        
    }

    private void populateDriverComboBox()
    {
        try
       {
        assignDriverCmb.removeAllItems();
        ambOrg =  GetOrganizations.getAmbulanceOrganization(ecoSystem, userAccount);
        System.out.println(ambOrg.getName());
        System.out.println(  ambOrg.getUserAccountDirectory().getUserAccountList());
        
      
  
       if(ambOrg!=null)
       {
        if(ambOrg.getUserAccountDirectory().getUserAccountList().isEmpty())
        {
        JOptionPane.showMessageDialog(null, "No Ambulance driver exists in our records as of now!","warning", JOptionPane.WARNING_MESSAGE);
         return;    
        }
         assignDriverCmb.removeAllItems();
        for(UserAccount userAccount : ambOrg.getUserAccountDirectory().getUserAccountList())
        {
               assignDriverCmb.addItem(userAccount.getUserName());
        }   
       }
       }
       catch(NullPointerException exc)
       {
       JOptionPane.showMessageDialog(null, "No Ambulance Organization exists in our records as of now!","warning", JOptionPane.WARNING_MESSAGE);
               
       }
        
        
    }
    
    
    
    
}



