
package userInterface.pharmacyHeadpkg;

import business.EcoSystem;
import business.common.Medicine;
import business.common.TableHeadColors;
import business.organizationpkg.*;
import business.userAccountpkg.UserAccount;
import business.workQueuepkg.*;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author shravyagunda
 */

//this is the PharmaHeadWorkAreaJPanel
public class PharmaHeadWorkAreaJPanel extends javax.swing.JPanel {

   
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private EcoSystem ecoSystem;
    private PharmacyOrganization pharmacyOrganization;
    private OrganizationDirectory OrgDir;
    
    public PharmaHeadWorkAreaJPanel(JPanel userProcessContainer,OrganizationDirectory orgDir, UserAccount userAccount, Organization organization, EcoSystem ecoSystem) {
        
        initComponents();
        this.ecoSystem = ecoSystem;
        this.userAccount = userAccount;
        this.userProcessContainer = userProcessContainer;
        this.pharmacyOrganization = (PharmacyOrganization)organization;
        this.OrgDir=orgDir;
        populateWorkReqJtable();
        workRequestJTable.getTableHeader().setDefaultRenderer(new TableHeadColors());
        //
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Medicine", "Quantity", "Sender", "Status", "Role"
            }
        ));
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 170, 610, 207));

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 430, -1, -1));

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 430, -1, -1));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 3, 24)); // NOI18N
        jLabel1.setText("PHARMACY HEAD WORK AREA");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, 350, 70));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/opaque-meds.png"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, -3, 1300, 910));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        // TODO add your handling code here:
          int selectedRow =workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }


       int row = workRequestJTable.getSelectedRow();
        String medName = workRequestJTable.getValueAt(row, 0).toString();
        ArrayList<Medicine> medsList = userAccount.getPerson().getInventory();
        Medicine selectedMed = null;
        //change later to sending only required one
        for(Medicine med : medsList){
            if(med.getName().equals(medName))
                selectedMed =  med;
        }
        NeedMedsWorkRequest nmwr=null;
        ArrayList<WorkRequest> reqList = userAccount.getWorkQueue().getWorkRequestList();
        
        for(WorkRequest ne:reqList )
        {
            NeedMedsWorkRequest nm=(NeedMedsWorkRequest)ne;
            if(nm.getMed().getName().equals(selectedMed.getName()))
                nmwr=nm;
            
        }
        WorkRequest request = nmwr;
        if(request.getReceiver()!=null)
        {
         JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
         return;     
        }
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        populateWorkReqJtable();
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
          JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
       int row = workRequestJTable.getSelectedRow();
        String medName = workRequestJTable.getValueAt(row, 0).toString();
        ArrayList<Medicine> medsList = userAccount.getPerson().getInventory();
        Medicine selectedMed = null;
 
        for(Medicine med : medsList){
            if(med.getName().equals(medName))
                selectedMed =  med;
        }
        NeedMedsWorkRequest nmwr=null;
        ArrayList<WorkRequest> reqList = userAccount.getWorkQueue().getWorkRequestList();
        
        for(WorkRequest ne:reqList )
        {
            NeedMedsWorkRequest nm=(NeedMedsWorkRequest)ne;
            if(nm.getMed().getName().equals(selectedMed.getName()))
                nmwr=nm;
            
        }
        
        if(nmwr.getReceiver() == null)
        {
            JOptionPane.showMessageDialog(null, "Please assign the request first", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(nmwr.getStatus().equalsIgnoreCase("Completed"))
        {
         JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
         return;     
        }
         if(nmwr.getStatus().equalsIgnoreCase("Processing") ||  nmwr.getStatus().equalsIgnoreCase("Pending"))
        {
         if(nmwr.getReceiver()!=userAccount)
         {
         JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
         return;     
         }
        }
        nmwr.setStatus("Processing");
        nmwr.setReceiver(userAccount);
        ProcessNeedMedsJPanel ptwrjp = new ProcessNeedMedsJPanel(userProcessContainer, nmwr, userAccount);
        userProcessContainer.add("ProcessTransportWorkRequestJPanel", ptwrjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_processJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables

    public void populateWorkReqJtable() {
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        model.setRowCount(0);
        
        System.out.println(pharmacyOrganization);
        System.out.println(pharmacyOrganization.getUserAccountDirectory().getUserAccountList());
        System.out.println(userAccount.getWorkQueue().getWorkRequestList());
        
        if(pharmacyOrganization.getWorkQueue().getWorkRequestList().isEmpty())
        {
            System.out.println("Requests empty");
            
        }
        if(!userAccount.getWorkQueue().getWorkRequestList().isEmpty())
        {
        for(WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[5];
            NeedMedsWorkRequest  need = (NeedMedsWorkRequest) request;
            row[0]=need.getMed().getName();
            int quan = need.getMed().getRequiredQuantity()-need.getMed().getAvaialableQuantity();
            row[1]=quan;
            
            row[2] = request.getSender().getUserName();
            row[3] = request.getStatus();
            row[4] = dateFormat.format(request.getRequestDate());
            
           
            model.addRow(row);
        }
        }
    }
}
