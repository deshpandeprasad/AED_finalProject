
package userInterface.nurse;

import business.EcoSystem;
import business.common.TableHeadColors;
import business.organizationpkg.*;
import business.organizationpkg.OrganizationDirectory;
import business.userAccountpkg.UserAccount;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import business.enterprisepkg.Enterprise;
import business.workQueuepkg.NeedNurseWorkRequest;
import business.workQueuepkg.WorkRequest;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.table.DefaultTableModel;

//this is the NurseWorkAreaJPanel
public class NurseWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NurseWorkAreaJPanel
     */
    private JPanel userProcessContainer;
   private UserAccount userAccount;  
    private OrganizationDirectory od;
    private NurseSchoolOrganization nurseOrg;
    private EcoSystem ecoSystem;
    private Enterprise enterprise;
    public NurseWorkAreaJPanel(JPanel userProcessContainer, Enterprise enterprise, UserAccount userAccount, Organization organization, EcoSystem ecoSystem) {
        initComponents();
         this.userProcessContainer = userProcessContainer;
         this.userAccount = userAccount;
         this.enterprise=enterprise;
         this.nurseOrg = (NurseSchoolOrganization)organization;
         this.ecoSystem = ecoSystem;
         nurseRequestListTable.getTableHeader().setDefaultRenderer(new TableHeadColors());
         
         populatenurseRequestTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        assignBtn = new javax.swing.JButton();
        processReqBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        nurseRequestListTable = new javax.swing.JTable();
        refreshBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        manageEnt = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        assignBtn.setText("Assign to me");
        assignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignBtnActionPerformed(evt);
            }
        });
        add(assignBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 470, -1, -1));

        processReqBtn.setText("Process");
        processReqBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processReqBtnActionPerformed(evt);
            }
        });
        add(processReqBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 470, -1, -1));

        nurseRequestListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Destination Location", "Requestor", "Requested Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(nurseRequestListTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, 570, 173));

        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        add(refreshBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 200, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/finalopaquebg.png"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 910));

        manageEnt.setFont(new java.awt.Font("Malayalam MN", 3, 24)); // NOI18N
        manageEnt.setText("NurseRequests");
        add(manageEnt, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 290, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void processReqBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processReqBtnActionPerformed

        int selectedRow = nurseRequestListTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        NeedNurseWorkRequest nnwr = (NeedNurseWorkRequest)nurseRequestListTable.getValueAt(selectedRow, 0);
        if(nnwr.getReceiver() == null)
        {
            JOptionPane.showMessageDialog(null, "Please assign the request first", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(nnwr.getStatus().equalsIgnoreCase("Completed"))
        {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(nnwr.getStatus().equalsIgnoreCase("Processing") ||  nnwr.getStatus().equalsIgnoreCase("Pending"))
        {
            if(nnwr.getReceiver()!=userAccount)
            {
                JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
        nnwr.setStatus("Processing");
        nnwr.setReceiver(userAccount);
        ProcessNurseWorkRequestJPanel ptwrjp = new ProcessNurseWorkRequestJPanel(userProcessContainer, nnwr, userAccount);
        userProcessContainer.add("ProcessNurseWorkRequestJPanel", ptwrjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_processReqBtnActionPerformed
 
    public void populatenurseRequestTable(){
        DefaultTableModel model = (DefaultTableModel)nurseRequestListTable.getModel();
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy"); 
        model.setRowCount(0);
        System.out.println("Nurse work area: populate request table");
        System.out.println(nurseOrg);
        System.out.println("Nurse org user accounts" + nurseOrg.getUserAccountDirectory().getUserAccountList());
        System.out.println("Nurse useracc workrequest" + userAccount.getWorkQueue().getWorkRequestList());
        
        if(nurseOrg.getWorkQueue().getWorkRequestList().isEmpty())
        {
            System.out.println("checking if nurseorg work request emply: Requests empty");
            
        }
        
        System.out.println("Out of nurse work area");
        
        if(!nurseOrg.getWorkQueue().getWorkRequestList().isEmpty())
        {
        for(WorkRequest request : nurseOrg.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getPerson().getName();
            row[2] = dateFormat.format(request.getRequestDate());
            row[3] = request.getStatus();
           
            model.addRow(row);
        }
        }
 }
    
    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        populatenurseRequestTable();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void assignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignBtnActionPerformed

        int selectedRow = nurseRequestListTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest request = (WorkRequest)nurseRequestListTable.getValueAt(selectedRow, 0);
        if(request.getReceiver()!=null)
        {
            JOptionPane.showMessageDialog(null, "Request has been processed earlier!", "warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        populatenurseRequestTable();
    }//GEN-LAST:event_assignBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel manageEnt;
    private javax.swing.JTable nurseRequestListTable;
    private javax.swing.JButton processReqBtn;
    private javax.swing.JButton refreshBtn;
    // End of variables declaration//GEN-END:variables
}
